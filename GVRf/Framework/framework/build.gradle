import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.library'

repositories {
    flatDir {
        dirs 'src/main/libs'
    }
}

android {
    compileSdkVersion 24
    buildToolsVersion '24.0.3'

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 24

        ndk {
            moduleName "gvrf"
        }
    }

    task buildInfo(type:Exec){
        commandLine 'git log -n 1 --format=%H'.split()
        def source = new File(projectDir.absolutePath + '/src/main/jni', 'buildinfo.cpp')
        def javaSource = new File(projectDir.absolutePath + '/src/main/java/org/gearvrf/', 'BuildInfo.java')
        standardOutput = new ByteArrayOutputStream()

        doLast {
            source.text = '#include "util/gvr_log.h"\n'
            source.text += '#include <jni.h>\n\n'
            source.text += 'jint JNI_OnLoad(JavaVM *vm, void *reserved) {\n'
            source.text += '    LOGI("FRAMEWORK-CPP  HEAD: '+ standardOutput.toString().trim() + '");\n'
            source.text += '    JNIEnv* env;\n';
            source.text += '    if(JNI_OK == vm->AttachCurrentThread(&env, 0)) {\n'
            source.text += '        jclass java_class = env->FindClass("org/gearvrf/BuildInfo");\n'
            source.text += '        if (env->ExceptionCheck()) {\n'
            source.text += '            env->ExceptionClear();\n'
            source.text += '        }\n'
            source.text += '        if(nullptr != java_class) {\n'
            source.text += '            env->GetStaticFieldID(java_class, "HEAD", "java/lang/String");\n'
            source.text += '            if (env->ExceptionCheck()) {\n'
            source.text += '                env->ExceptionClear();\n'
            source.text += '            }\n'
            source.text += '            env->DeleteLocalRef(java_class);\n'
            source.text += '        }\n'
            source.text += '    }\n'
            source.text += '    return JNI_VERSION_1_6;\n'
            source.text += '}'

            javaSource.text = 'package org.gearvrf;\n'
            javaSource.text += 'public class BuildInfo {\n'
            javaSource.text += '    public final static String HEAD="' + standardOutput.toString().trim() + '";\n'
            javaSource.text += '    static { android.util.Log.i("gvrf", "FRAMEWORK-JAVA HEAD: " + HEAD); }\n'
            javaSource.text += '}\n'
        }
    }

    task buildNative(type: Exec, dependsOn: buildInfo)  {
        def ndkbuild = ""
        if (rootProject.hasProperty("ANDROID_NDK_HOME")) {
            ndkbuild = rootProject.property("ANDROID_NDK_HOME")
            ndkbuild += '/'
        }
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            ndkbuild += 'ndk-build.cmd'
        } else {
            ndkbuild += 'ndk-build'
        }

        if (rootProject.hasProperty("ARM64")) {
            environment 'ARM64', "true"
        }
        commandLine ndkbuild, '-C', file('src/main').absolutePath, '-j', Runtime.runtime.availableProcessors()//, 'NDK_DEBUG=1'
    }

    buildTypes {
        debug {
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
        }
    }

    sourceSets.main {
        java.srcDirs = ['src/main/java']
        jni.srcDirs = [] // no auto generation of Android.mk
        // pre-compiled libraries
        jniLibs {
            srcDir 'src/main/libs'
        }
    }

    task cleanNative(type: Exec) {
        def ndkbuild = ""
        if (rootProject.hasProperty("ANDROID_NDK_HOME")) {
            ndkbuild = rootProject.property("ANDROID_NDK_HOME")
            ndkbuild += '/'
        }
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            ndkbuild += 'ndk-build.cmd'
        } else {
            ndkbuild += 'ndk-build'
        }

        if (rootProject.hasProperty("ARM64")) {
            environment 'ARM64', "true"
        }
        commandLine ndkbuild, '-C', file('src/main').absolutePath, '-j', Runtime.runtime.availableProcessors(), 'clean'
    }

    clean.dependsOn 'cleanNative'

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn buildNative
    }

    task uploadToGitHub(type: Exec) {
        onlyIf {
            System.env['ACCESS_TOKEN'] != null
        }

        commandLine '../../tools/upload_to_github', file('build/outputs/aar/' + project.name + '-debug.aar').absolutePath
    }
    uploadToGitHub.doFirst {
        println('uploading to github')
    }
}

project.ext.jomlVersion = "1.9.1-SNAPSHOT"

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile fileTree(dir: 'src/main/libs', include: ['*.jar'])
    compile "org.joml:joml-android:${jomlVersion}"
}

clean {}.doLast {
    if (rootProject.hasProperty("LIBS_DIRECTORY")) {
        def libsdirPath = projectDir.absolutePath + '/../../../' +
                rootProject.property("LIBS_DIRECTORY")
        project.delete(libsdirPath + '/' + project.name + '-debug.aar')
    }

    def testsLibs = "../../../../GearVRf-Tests/gearvrf-libs/"
    if (file(testsLibs).exists()) {
        project.delete(testsLibs + '/' + project.name + '-debug.aar')
    }

    def gearvrfLibs = project.rootDir.absolutePath + "/../gearvrf-libs"
    if (file(gearvrfLibs).exists()) {
        project.delete(gearvrfLibs + '/' + project.name + '-debug.aar')
        project.delete(gearvrfLibs + '/' + project.name + '-for-plugins.zip')
    }
}

task copyAARFiles(type: Copy) {
    if (rootProject.hasProperty("LIBS_DIRECTORY")) {
        println "copying aar files to the libs_directory"
        def libsdirPath = projectDir.absolutePath + '/../../../' +
                rootProject.property("LIBS_DIRECTORY")
        def libsDir = new File(libsdirPath);
        if (libsDir.exists()) {
            from 'build/outputs/aar'
            into libsDir
            include project.name + '-debug.aar'
        } else {
            println "Cannot copy aar files, libs directory does not exist!"
        }
    }
}

task packageForPlugins(type: Zip) {
    baseName project.name + '-for-plugins'

    from './build/intermediates/bundles/debug/classes.jar'
    rename 'classes.jar', project.name  + '-classes.jar'

    from './src/main/libs/'
    include '*.jar'

    from './src/main/libs/armeabi-v7a/'
    include '*.so'
}

tasks.whenTaskAdded { task ->
    if (task.name == 'assembleDebug') {
        task<< {
            tasks.copyAARFiles.execute()

            def testsLibs = "../../../../GearVRf-Tests/gearvrf-libs/"
            if (file(testsLibs).exists()) {
                copy {
                    from 'build/outputs/aar'
                    into testsLibs
                    include project.name + '-debug.aar'
                }
            }
            def gearvrfLibs = project.rootDir.absolutePath + "/../gearvrf-libs"
            if (!file(gearvrfLibs).exists()) {
                file(gearvrfLibs).mkdir();
            }
            copy {
                from 'build/outputs/aar'
                into gearvrfLibs
                include project.name + '-debug.aar'
            }

            if (System.env['ACCESS_TOKEN'] != null) {
                uploadToGitHub.execute();
            }

            tasks.packageForPlugins.execute()
            copy {
                from 'build/distributions/'
                into gearvrfLibs
                include project.name + '-for-plugins.zip'
            }
        }
    }
}
